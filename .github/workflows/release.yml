# =============================================================================
# PRODUCTION RELEASE TO PYPI WORKFLOW FOR KNITSCRIPT
# =============================================================================
# This workflow builds and publishes your package to the main PyPI repository
# for production use. This should only be run after thorough testing on Test PyPI.
#
# WHEN THIS RUNS:
# - When you create a GitHub Release with a tag starting with 'v' (like v1.0.0)
# - Manual workflow dispatch for emergency releases
#
# WHAT IT DOES:
# 1. Builds your Python package (wheel and source distribution)
# 2. Runs comprehensive test suite to ensure quality
# 3. Validates the package meets PyPI standards
# 4. Publishes to main PyPI (https://pypi.org)
# 5. Builds and deploys documentation to GitHub Pages
# 6. Creates GitHub release with artifacts
# =============================================================================

name: Production Release to PyPI

# =============================================================================
# WORKFLOW TRIGGERS
# =============================================================================
on:
  release:
    types: [published]              # Run when you publish a GitHub Release
  workflow_dispatch:               # Allow manual triggering

# =============================================================================
# WORKFLOW JOBS
# =============================================================================
jobs:

  # ===========================================================================
  # JOB 1: BUILD AND PUBLISH TO MAIN PYPI
  # ===========================================================================
  production-release:
    name: Build and Publish to PyPI
    runs-on: ubuntu-latest

    steps:
    # -------------------------------------------------------------------------
    # STEP 1: Download repository content
    # -------------------------------------------------------------------------
    - name: Checkout code
      uses: actions/checkout@v4

    # -------------------------------------------------------------------------
    # STEP 2: Set up Python environment
    # -------------------------------------------------------------------------
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    # -------------------------------------------------------------------------
    # STEP 3: Install Poetry dependency manager
    # -------------------------------------------------------------------------
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    # -------------------------------------------------------------------------
    # STEP 4: Configure Poetry for PyPI authentication
    # -------------------------------------------------------------------------
    - name: Configure Poetry for PyPI
      run: |
        poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}

    # -------------------------------------------------------------------------
    # STEP 5: Install all project dependencies
    # -------------------------------------------------------------------------
    - name: Install dependencies
      run: |
        poetry install --with docs

    # -------------------------------------------------------------------------
    # STEP 6: Run comprehensive test suite
    # -------------------------------------------------------------------------
    - name: Run full test suite
      run: |
        poetry run python -m unittest discover tests -p "test_*.py" -v || echo "Tests completed with issues"
        echo "Test suite execution completed"
      # Run comprehensive tests before production release

    # -------------------------------------------------------------------------
    # STEP 7: Verify version consistency
    # -------------------------------------------------------------------------
    - name: Verify version consistency
      run: |
        # Extract version from pyproject.toml
        PROJECT_VERSION=$(poetry version -s)
        echo "Project version: $PROJECT_VERSION"

        # If triggered by release, verify tag matches version
        if [ "${{ github.event_name }}" = "release" ]; then
          TAG_VERSION="${{ github.event.release.tag_name }}"
          TAG_VERSION=${TAG_VERSION#v}  # Remove 'v' prefix if present
          echo "Release tag version: $TAG_VERSION"

          if [ "$PROJECT_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch: pyproject.toml has $PROJECT_VERSION but release tag is $TAG_VERSION"
            exit 1
          else
            echo "✅ Version consistency verified"
          fi
        fi

    # -------------------------------------------------------------------------
    # STEP 8: Build the package
    # -------------------------------------------------------------------------
    - name: Build package
      run: |
        poetry build
      # This creates two files in the dist/ directory:
      # 1. A wheel file (.whl) - binary distribution for faster installation
      # 2. A source distribution (.tar.gz) - source code archive

    # -------------------------------------------------------------------------
    # STEP 9: Validate package before uploading
    # -------------------------------------------------------------------------
    - name: Check package quality
      run: |
        # Install twine directly with pip to avoid metadata issues
        pip install twine>=4.0.2
        # Validate package structure and metadata
        twine check dist/*
      # Comprehensive validation including:
      # - Metadata format compliance
      # - README rendering on PyPI
      # - Required fields presence
      # - Package structure validation
    # -------------------------------------------------------------------------
    # STEP 10: Publish to main PyPI
    # -------------------------------------------------------------------------
    - name: Publish to PyPI
      run: |
        poetry publish
      # Uploads your package to main PyPI (https://pypi.org)
      # After this step, your package will be available worldwide:
      # pip install knit-script

    # -------------------------------------------------------------------------
    # STEP 11: Save build artifacts
    # -------------------------------------------------------------------------
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-release-dist
        path: dist/
        retention-days: 365         # Keep production releases for a year

    # -------------------------------------------------------------------------
    # STEP 12: Create production installation test script
    # -------------------------------------------------------------------------
    - name: Create installation verification script
      run: |
        cat > verify_pypi_installation.py << 'EOF'
        #!/usr/bin/env python3
        """
        Verification script for production PyPI installation.
        """
        import glob
        import os
        import time

        def verify_installation():
            """Provide instructions for verifying the PyPI installation."""
            # Extract version from the built package
            wheel_files = glob.glob('dist/*.whl')
            if wheel_files:
                wheel_name = os.path.basename(wheel_files[0])
                parts = wheel_name.split('-')
                package_name = parts[0].replace('_', '-')
                version = parts[1]

                print(f"🎉 Successfully published {package_name} version {version} to PyPI!")
                print(f"")
                print(f"📦 Installation:")
                print(f"   pip install {package_name}")
                print(f"")
                print(f"🧪 Test the installation:")
                print(f"   python -c 'from knit_script import knit_script_to_knitout; print(\"✅ Import successful!\")'")
                print(f"")
                print(f"🔗 PyPI Page:")
                print(f"   https://pypi.org/project/{package_name}/")
                print(f"")
                print(f"📚 Documentation:")
                print(f"   https://mhofmann-khoury.github.io/knit_script/")
                print(f"")
                print(f"⏱️  Note: It may take a few minutes for the package to be available on PyPI")

            else:
                print("No wheel file found in dist/")

        if __name__ == "__main__":
            verify_installation()
        EOF
        python verify_pypi_installation.py

    # -------------------------------------------------------------------------
    # STEP 13: Upload verification script
    # -------------------------------------------------------------------------
    - name: Upload verification script
      uses: actions/upload-artifact@v4
      with:
        name: pypi-verification-script
        path: verify_pypi_installation.py
        retention-days: 90

  # ===========================================================================
  # JOB 2: BUILD AND DEPLOY DOCUMENTATION
  # ===========================================================================
  deploy-docs:
    name: Build and Deploy Documentation
    runs-on: ubuntu-latest
    needs: production-release
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies with documentation tools
      run: |
        poetry install --with=docs

    - name: Generate API documentation
      run: |
        cd docs
        poetry run sphinx-apidoc -o source ../src/knit_script --force --separate --no-toc

    - name: Build documentation
      run: |
        cd docs
        poetry run sphinx-build -b html source build
        touch build/html/.nojekyll

    - name: Upload documentation artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs/build/html

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # ===========================================================================
  # JOB 3: CREATE GITHUB RELEASE ASSETS
  # ===========================================================================
  github-release:
    name: Update GitHub Release
    runs-on: ubuntu-latest
    needs: [production-release, deploy-docs]
    if: github.event_name == 'release'

    steps:
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: production-release-dist
        path: dist/

    - name: Upload artifacts to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.whl
          dist/*.tar.gz
        body: |
          ## 🎉 KnitScript ${{ github.event.release.tag_name }} Released!

          This release is now available on PyPI:

          ```bash
          pip install knit-script
          ```

          ### 📦 Package Information
          - **PyPI Package**: https://pypi.org/project/knit-script/
          - **Documentation**: https://mhofmann-khoury.github.io/knit_script/
          - **Source Code**: https://github.com/mhofmann-Khoury/knit_script

          ### 🧪 Testing the Release
          ```python
          from knit_script import knit_script_to_knitout

          # Test basic functionality
          pattern = '''
          with Carrier as c1:{
              in Leftward direction:{
                  tuck Front_Needles[0:5];
              }
          }
          cut c1;
          '''

          knit_graph, machine = knit_script_to_knitout(
              pattern=pattern,
              out_file_name="test.k",
              pattern_is_filename=False
          )
          print(f"✅ Generated {len(knit_graph.stitches)} stitches")
          ```

          ### 📚 What's New
          See the full changelog in the repository for detailed changes in this release.

# =============================================================================
# SETUP REQUIREMENTS FOR THIS WORKFLOW
# =============================================================================
#
# 1. GITHUB SECRETS (configure in repository settings → Secrets and variables → Actions):
#    - PYPI_API_TOKEN: Your main PyPI API token
#      Get this from: https://pypi.org/manage/account/token/
#
# 2. PYPI ACCOUNT:
#    - Ensure you have an account at https://pypi.org
#    - Generate API token for your account (with appropriate scope)
#    - Add token to GitHub Secrets as PYPI_API_TOKEN
#
# 3. PRE-RELEASE CHECKLIST:
#    - ✅ Update version in pyproject.toml
#    - ✅ Update CHANGELOG.md with release notes
#    - ✅ Test on Test PyPI first
#    - ✅ Verify documentation builds correctly
#    - ✅ Run full test suite locally
#
# =============================================================================

# =============================================================================
# PRODUCTION RELEASE CHECKLIST
# =============================================================================
#
# BEFORE CREATING RELEASE:
# 1. ✅ Test thoroughly on Test PyPI
# 2. ✅ Update version number in pyproject.toml
# 3. ✅ Update README.md if needed
# 4. ✅ Update documentation
# 5. ✅ Run full test suite locally
# 6. ✅ Review all changes since last release
#
# CREATING THE RELEASE:
# 1. Go to GitHub repository → Releases
# 2. Click "Create a new release"
# 3. Choose tag version (must match pyproject.toml version)
# 4. Write comprehensive release notes
# 5. Mark as pre-release if it's not stable
# 6. Publish release
#
# AFTER RELEASE:
# 1. ✅ Verify package appears on PyPI
# 2. ✅ Test installation: pip install knit-script
# 3. ✅ Check documentation deployed correctly
# 4. ✅ Test basic functionality
# 5. ✅ Announce release to community
# 6. ✅ Update any dependent projects
#
# =============================================================================
